#include "draw.h"
#include <stdint.h>

struct GlypthInfo {
	uint8_t width;
	uint16_t offset;
};


const uint8_t hwBitmaps[] =
{
	0x00, 0x00, //                 
	0x00, 0x00, //                 
	0xFC, 0x3F, //   ############  
	0x00, 0x03, //         ##      
	0x00, 0x01, //         #       
	0x00, 0x07, //         ###     
	0x00, 0x3C, //           ####  
	0x00, 0x00, //                 
	0x80, 0x03, //        ###      
	0x00, 0x3F, //         ######  
	0x00, 0x38, //            ###  
	0x00, 0x08, //            #    
	0x00, 0x3B, //         ## ###  
	0x80, 0x3F, //        #######  
	0x00, 0x00, //                 
	0x00, 0x00, //                 
};

const uint8_t* get_hw(int* width, int* height)
{
	if (width) *width = 16;
	if (height) *height = 16;
	return hwBitmaps;
}

const uint8_t ttBitmaps[] =
{
	0x04, 0x00, //   #         
	0xFC, 0x0F, //   ##########
	0x3C, 0x00, //   ####      
	0x34, 0x04, //   # ##    # 
	0x24, 0x04, //   #  #    # 
	0x3C, 0x04, //   ####    # 
	0x00, 0x04, //           # 
	0x00, 0x04, //           # 
	0xFF, 0x07, // ########### 
	0x00, 0x04, //           #
};

const uint8_t* get_tt(int* width, int* height)
{
	if (width) *width = 10;
	if (height) *height = 12;
	return ttBitmaps;
}


// 
//  Font data for Consolas 10pt
// 
static const uint8_t consolas_10ptBitmaps[] = 
{
	// @0 'A' (6 pixels wide)
	0xF0, 0x00, //     ####  
	0x3E, 0x00, //  #####    
	0x21, 0x00, // #    #    
	0x27, 0x00, // ###  #    
	0x38, 0x00, //    ###    
	0xE0, 0x00, //      ###  

	// @12 'B' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x89, 0x00, // #  #   #  
	0x89, 0x00, // #  #   #  
	0x89, 0x00, // #  #   #  
	0x76, 0x00, //  ## ###   

	// @22 'C' (5 pixels wide)
	0x7C, 0x00, //   #####   
	0xC2, 0x00, //  #    ##  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  

	// @32 'D' (6 pixels wide)
	0xFF, 0x00, // ########  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0x42, 0x00, //  #    #   
	0x3C, 0x00, //   ####    

	// @44 'E' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x89, 0x00, // #  #   #  
	0x89, 0x00, // #  #   #  
	0x89, 0x00, // #  #   #  
	0x89, 0x00, // #  #   #  

	// @54 'F' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x09, 0x00, // #  #      
	0x09, 0x00, // #  #      
	0x09, 0x00, // #  #      
	0x09, 0x00, // #  #      

	// @64 'G' (6 pixels wide)
	0x3C, 0x00, //   ####    
	0x42, 0x00, //  #    #   
	0x81, 0x00, // #      #  
	0x89, 0x00, // #  #   #  
	0x89, 0x00, // #  #   #  
	0xF9, 0x00, // #  #####  

	// @76 'H' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x08, 0x00, //    #      
	0x08, 0x00, //    #      
	0x08, 0x00, //    #      
	0xFF, 0x00, // ########  

	// @86 'I' (5 pixels wide)
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0xFF, 0x00, // ########  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  

	// @96 'J' (4 pixels wide)
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0x7F, 0x00, // #######   

	// @104 'K' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x10, 0x00, //     #     
	0x2C, 0x00, //   ## #    
	0x42, 0x00, //  #    #   
	0x81, 0x00, // #      #  

	// @114 'L' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x80, 0x00, //        #  
	0x80, 0x00, //        #  
	0x80, 0x00, //        #  
	0x80, 0x00, //        #  

	// @124 'M' (7 pixels wide)
	0xC0, 0x00, //       ##  
	0xFF, 0x00, // ########  
	0x0E, 0x00, //  ###      
	0x10, 0x00, //     #     
	0x0C, 0x00, //   ##      
	0xFF, 0x00, // ########  
	0xF8, 0x00, //    #####  

	// @138 'N' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x07, 0x00, // ###       
	0x18, 0x00, //    ##     
	0xE0, 0x00, //      ###  
	0xFF, 0x00, // ########  

	// @148 'O' (7 pixels wide)
	0x3C, 0x00, //   ####    
	0xC2, 0x00, //  #    ##  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0x81, 0x00, // #      #  
	0x43, 0x00, // ##    #   
	0x3C, 0x00, //   ####    

	// @162 'P' (5 pixels wide)
	0xFF, 0x00, // ########  
	0x11, 0x00, // #   #     
	0x11, 0x00, // #   #     
	0x11, 0x00, // #   #     
	0x0E, 0x00, //  ###      

	// @172 'Q' (6 pixels wide)
	0x7C, 0x00, //   #####   
	0xC3, 0x00, // ##    ##  
	0x81, 0x01, // #      ## 
	0x81, 0x02, // #      # #
	0xC3, 0x02, // ##    ## #
	0x3E, 0x02, //  #####   #

	// @184 'R' (6 pixels wide)
	0xFF, 0x00, // ########  
	0x11, 0x00, // #   #     
	0x11, 0x00, // #   #     
	0x31, 0x00, // #   ##    
	0xEE, 0x00, //  ### ###  
	0x80, 0x00, //        #  

	// @196 'S' (5 pixels wide)
	0x86, 0x00, //  ##    #  
	0x89, 0x00, // #  #   #  
	0x89, 0x00, // #  #   #  
	0x91, 0x00, // #   #  #  
	0x60, 0x00, //      ##   

	// @206 'T' (5 pixels wide)
	0x01, 0x00, // #         
	0x01, 0x00, // #         
	0xFF, 0x00, // ########  
	0x01, 0x00, // #         
	0x01, 0x00, // #         

	// @216 'U' (6 pixels wide)
	0x7F, 0x00, // #######   
	0x80, 0x00, //        #  
	0x80, 0x00, //        #  
	0x80, 0x00, //        #  
	0x80, 0x00, //        #  
	0x7F, 0x00, // #######   

	// @228 'V' (7 pixels wide)
	0x07, 0x00, // ###       
	0x1C, 0x00, //   ###     
	0xF0, 0x00, //     ####  
	0x80, 0x00, //        #  
	0x70, 0x00, //     ###   
	0x1C, 0x00, //   ###     
	0x03, 0x00, // ##        

	// @242 'W' (5 pixels wide)
	0xFF, 0x00, // ########  
	0xC0, 0x00, //       ##  
	0x38, 0x00, //    ###    
	0xC0, 0x00, //       ##  
	0xFF, 0x00, // ########  

	// @252 'X' (7 pixels wide)
	0x81, 0x00, // #      #  
	0xC3, 0x00, // ##    ##  
	0x3C, 0x00, //   ####    
	0x18, 0x00, //    ##     
	0x3C, 0x00, //   ####    
	0xC3, 0x00, // ##    ##  
	0x81, 0x00, // #      #  

	// @266 'Y' (7 pixels wide)
	0x01, 0x00, // #         
	0x06, 0x00, //  ##       
	0x0C, 0x00, //   ##      
	0xF0, 0x00, //     ####  
	0x0C, 0x00, //   ##      
	0x06, 0x00, //  ##       
	0x01, 0x00, // #         

	// @280 'Z' (6 pixels wide)
	0x81, 0x00, // #      #  
	0xE1, 0x00, // #    ###  
	0x91, 0x00, // #   #  #  
	0x89, 0x00, // #  #   #  
	0x87, 0x00, // ###    #  
	0x01, 0x00, // #         
};

// Character descriptors for Consolas 10pt
// { [Char width in bits], [Offset into consolas_10ptCharBitmaps in bytes] }
static const GlypthInfo consolas_10ptDescriptors[] = 
{
	{6, 0}, 		// A 
	{5, 12}, 		// B 
	{5, 22}, 		// C 
	{6, 32}, 		// D 
	{5, 44}, 		// E 
	{5, 54}, 		// F 
	{6, 64}, 		// G 
	{5, 76}, 		// H 
	{5, 86}, 		// I 
	{4, 96}, 		// J 
	{5, 104}, 		// K 
	{5, 114}, 		// L 
	{7, 124}, 		// M 
	{5, 138}, 		// N 
	{7, 148}, 		// O 
	{5, 162}, 		// P 
	{6, 172}, 		// Q 
	{6, 184}, 		// R 
	{5, 196}, 		// S 
	{5, 206}, 		// T 
	{6, 216}, 		// U 
	{7, 228}, 		// V 
	{5, 242}, 		// W 
	{7, 252}, 		// X 
	{7, 266}, 		// Y 
	{6, 280}, 		// Z 
};

const uint8_t* getGlypth_consolas(int charID, int* advance, int* w, int* rows)
{
	if (charID >= 'A' && charID <= 'Z') {
		int index = charID - 'A';
		int width = consolas_10ptDescriptors[index].width;
		int offset = consolas_10ptDescriptors[index].offset;
		*advance = width + 2;
		*w = width;
		*rows = 2;
		return consolas_10ptBitmaps + offset;
	}
	*advance = 4;
	*w = 0;
	*rows = 0;
	return 0;
}


// 
//  Font data for Aurek-Besh 7pt
// 

// Character bitmaps for Aurek-Besh 7pt
const uint8_t aurekBesh_7ptBitmaps[] = 
{
	// @0 ',' (2 pixels wide)
	0xE0, 0x01, //      ####
	0xE0, 0x01, //      ####

	// @4 '.' (4 pixels wide)
	0xE0, 0x01, //      ####
	0xE0, 0x01, //      ####
	0xE0, 0x01, //      ####
	0xE0, 0x01, //      ####

	// @12 'A' (14 pixels wide)
	0xEF, 0x01, // #### ####
	0xEF, 0x01, // #### ####
	0x6C, 0x00, //   ## ##  
	0x6C, 0x00, //   ## ##  
	0x6C, 0x00, //   ## ##  
	0x6C, 0x00, //   ## ##  
	0x6C, 0x00, //   ## ##  
	0x6C, 0x00, //   ## ##  
	0xEC, 0x00, //   ## ### 
	0xC6, 0x00, //  ##   ## 
	0x87, 0x01, // ###    ##
	0x83, 0x01, // ##     ##
	0x03, 0x01, // ##      #
	0x01, 0x01, // #       #

	// @40 'B' (14 pixels wide)
	0x48, 0x00, //    #  #  
	0xCC, 0x00, //   ##  ## 
	0xCE, 0x01, //  ###  ###
	0x83, 0x01, // ##     ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0x83, 0x01, // ##     ##
	0xC6, 0x01, //  ##   ###
	0xCC, 0x00, //   ##  ## 
	0x48, 0x00, //    #  #  

	// @68 'C' (8 pixels wide)
	0x3F, 0x00, // ######   
	0x3F, 0x00, // ######   
	0x00, 0x00, //          
	0x38, 0x00, //    ###   
	0x38, 0x00, //    ###   
	0x00, 0x00, //          
	0xF8, 0x01, //    ######
	0xF8, 0x01, //    ######

	// @84 'D' (10 pixels wide)
	0x33, 0x01, // ##  ##  #
	0xB3, 0x01, // ##  ## ##
	0xF3, 0x01, // ##  #####
	0xF3, 0x00, // ##  #### 
	0x73, 0x00, // ##  ###  
	0x3B, 0x00, // ## ###   
	0x0F, 0x00, // ####     
	0x07, 0x00, // ###      
	0x03, 0x00, // ##       
	0x01, 0x00, // #        

	// @104 'E' (13 pixels wide)
	0x01, 0x00, // #        
	0x07, 0x00, // ###      
	0x1F, 0x00, // #####    
	0x7C, 0x00, //   #####  
	0xF0, 0x01, //     #####
	0xC0, 0x01, //       ###
	0xE0, 0x01, //      ####
	0x78, 0x00, //    ####  
	0x1F, 0x00, // #####    
	0x07, 0x00, // ###      
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########
	0x03, 0x00, // ##       

	// @130 'F' (13 pixels wide)
	0xF8, 0x01, //    ######
	0xF8, 0x01, //    ######
	0x98, 0x01, //    ##  ##
	0x98, 0x01, //    ##  ##
	0x98, 0x01, //    ##  ##
	0x98, 0x01, //    ##  ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########
	0x8C, 0x01, //   ##   ##
	0x8C, 0x01, //   ##   ##
	0x8C, 0x01, //   ##   ##
	0x86, 0x01, //  ##    ##
	0x82, 0x01, //  #     ##

	// @156 'G' (12 pixels wide)
	0xFF, 0x01, // #########
	0x80, 0x01, //        ##
	0x80, 0x01, //        ##
	0x87, 0x01, // ###    ##
	0x87, 0x01, // ###    ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0xE3, 0x01, // ##   ####
	0x7B, 0x00, // ## ####  
	0x1F, 0x00, // #####    
	0x07, 0x00, // ###      
	0x01, 0x00, // #        

	// @180 'H' (14 pixels wide)
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0xB3, 0x01, // ##  ## ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##

	// @208 'I' (4 pixels wide)
	0x0C, 0x00, //   ##     
	0x06, 0x00, //  ##      
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########

	// @216 'J' (13 pixels wide)
	0xB0, 0x01, //     ## ##
	0xB0, 0x01, //     ## ##
	0xB0, 0x01, //     ## ##
	0xB8, 0x01, //    ### ##
	0x98, 0x01, //    ##  ##
	0x98, 0x01, //    ##  ##
	0x98, 0x01, //    ##  ##
	0x98, 0x01, //    ##  ##
	0xEC, 0x01, //   ## ####
	0x7E, 0x00, //  ######  
	0x1F, 0x00, // #####    
	0x07, 0x00, // ###      
	0x01, 0x00, // #        

	// @242 'K' (12 pixels wide)
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########

	// @266 'L' (8 pixels wide)
	0x30, 0x00, //     ##   
	0x70, 0x00, //     ###  
	0x60, 0x00, //      ##  
	0xC0, 0x00, //       ## 
	0xC0, 0x01, //       ###
	0x80, 0x01, //        ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########

	// @282 'M' (7 pixels wide)
	0x80, 0x01, //        ##
	0xE0, 0x01, //      ####
	0xF8, 0x01, //    ######
	0xBE, 0x01, //  ##### ##
	0x8F, 0x01, // ####   ##
	0x87, 0x01, // ###    ##
	0x87, 0x01, // ###    ##

	// @296 'N' (14 pixels wide)
	0x38, 0x00, //    ###   
	0xFE, 0x00, //  ####### 
	0x83, 0x01, // ##     ##
	0xC0, 0x01, //       ###
	0xE0, 0x01, //      ####
	0x78, 0x00, //    ####  
	0x1E, 0x00, //  ####    
	0x07, 0x00, // ###      
	0x07, 0x00, // ###      
	0x1E, 0x00, //  ####    
	0x78, 0x00, //    ####  
	0xE0, 0x01, //      ####
	0xC0, 0x01, //       ###
	0x00, 0x01, //         #

	// @324 'O' (12 pixels wide)
	0x80, 0x00, //        # 
	0xF0, 0x01, //     #####
	0xFC, 0x01, //   #######
	0x8F, 0x01, // ####   ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x87, 0x01, // ###    ##
	0x9E, 0x01, //  ####  ##
	0xF8, 0x01, //    ######
	0xE0, 0x00, //      ### 

	// @348 'P' (9 pixels wide)
	0x70, 0x00, //     ###  
	0xFE, 0x00, //  ####### 
	0x87, 0x01, // ###    ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x80, 0x01, //        ##
	0x80, 0x01, //        ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########

	// @366 'Q' (12 pixels wide)
	0xFF, 0x00, // ######## 
	0xFF, 0x01, // #########
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x00, // ##     # 
	0x83, 0x00, // ##     # 
	0x03, 0x00, // ##       
	0x03, 0x00, // ##       
	0x0F, 0x00, // ####     
	0x0F, 0x00, // ####     

	// @390 'R' (10 pixels wide)
	0x02, 0x00, //  #       
	0x03, 0x01, // ##      #
	0x83, 0x01, // ##     ##
	0xE3, 0x01, // ##   ####
	0x73, 0x00, // ##  ###  
	0x3B, 0x00, // ## ###   
	0x1F, 0x00, // #####    
	0x0F, 0x00, // ####     
	0x07, 0x00, // ###      
	0x01, 0x00, // #        

	// @410 'S' (13 pixels wide)
	0x40, 0x00, //       #  
	0x60, 0x00, //      ##  
	0x61, 0x00, // #    ##  
	0xC3, 0x00, // ##    ## 
	0xC7, 0x00, // ###   ## 
	0x8E, 0x00, //  ###   # 
	0x9C, 0x01, //   ###  ##
	0xB8, 0x00, //    ### # 
	0x70, 0x00, //     ###  
	0xE0, 0x00, //      ### 
	0xC0, 0x01, //       ###
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########

	// @436 'T' (14 pixels wide)
	0x10, 0x00, //     #    
	0x30, 0x00, //     ##   
	0x70, 0x00, //     ###  
	0xE0, 0x00, //      ### 
	0xC0, 0x01, //       ###
	0x80, 0x01, //        ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########
	0x80, 0x01, //        ##
	0xC0, 0x01, //       ###
	0xE0, 0x00, //      ### 
	0x70, 0x00, //     ###  
	0x30, 0x00, //     ##   
	0x10, 0x00, //     #    

	// @464 'U' (12 pixels wide)
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########
	0x80, 0x01, //        ##
	0x80, 0x01, //        ##
	0x88, 0x01, //    #   ##
	0x8C, 0x01, //   ##   ##
	0x8E, 0x01, //  ###   ##
	0x87, 0x01, // ###    ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########

	// @488 'V' (10 pixels wide)
	0x01, 0x00, // #        
	0x03, 0x00, // ##       
	0x06, 0x00, //  ##      
	0x0C, 0x00, //   ##     
	0xF8, 0x01, //    ######
	0xFC, 0x01, //   #######
	0x0E, 0x00, //  ###     
	0x07, 0x00, // ###      
	0x03, 0x00, // ##       
	0x01, 0x00, // #        

	// @508 'W' (13 pixels wide)
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0x83, 0x01, // ##     ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########

	// @534 'X' (9 pixels wide)
	0xC0, 0x01, //       ###
	0xF0, 0x01, //     #####
	0xBC, 0x01, //   #### ##
	0x8F, 0x01, // ####   ##
	0x83, 0x01, // ##     ##
	0x8F, 0x01, // ####   ##
	0xBC, 0x01, //   #### ##
	0xF0, 0x01, //     #####
	0xC0, 0x01, //       ###

	// @552 'Y' (12 pixels wide)
	0x01, 0x00, // #        
	0x07, 0x00, // ###      
	0x1F, 0x00, // #####    
	0x79, 0x00, // #  ####  
	0xE7, 0x01, // ###  ####
	0x8E, 0x01, //  ###   ##
	0x08, 0x01, //    #    #
	0xC0, 0x01, //       ###
	0xF0, 0x00, //     #### 
	0x3C, 0x00, //   ####   
	0x0F, 0x00, // ####     
	0x03, 0x00, // ##       

	// @576 'Z' (11 pixels wide)
	0xC0, 0x01, //       ###
	0xC0, 0x01, //       ###
	0xD0, 0x01, //     # ###
	0x98, 0x01, //    ##  ##
	0x9C, 0x01, //   ###  ##
	0x8C, 0x01, //   ##   ##
	0x8C, 0x01, //   ##   ##
	0x8C, 0x01, //   ##   ##
	0x8C, 0x01, //   ##   ##
	0xFF, 0x01, // #########
	0xFF, 0x01, // #########
};

// Character descriptors for Aurek-Besh 7pt
// { [Char width in bits], [Offset into aurekBesh_7ptCharBitmaps in bytes] }
const GlypthInfo aurekBesh_7ptDescriptors[] = 
{
	{2, 0}, 		// , 
	{0, 0}, 		// - 
	{4, 4}, 		// . 
	{0, 0}, 		// / 
	{0, 0}, 		// 0 
	{0, 0}, 		// 1 
	{0, 0}, 		// 2 
	{0, 0}, 		// 3 
	{0, 0}, 		// 4 
	{0, 0}, 		// 5 
	{0, 0}, 		// 6 
	{0, 0}, 		// 7 
	{0, 0}, 		// 8 
	{0, 0}, 		// 9 
	{0, 0}, 		// : 
	{0, 0}, 		// ; 
	{0, 0}, 		// < 
	{0, 0}, 		// = 
	{0, 0}, 		// > 
	{0, 0}, 		// ? 
	{0, 0}, 		// @ 
	{14, 12}, 		// A 
	{14, 40}, 		// B 
	{8, 68}, 		// C 
	{10, 84}, 		// D 
	{13, 104}, 		// E 
	{13, 130}, 		// F 
	{12, 156}, 		// G 
	{14, 180}, 		// H 
	{4, 208}, 		// I 
	{13, 216}, 		// J 
	{12, 242}, 		// K 
	{8, 266}, 		// L 
	{7, 282}, 		// M 
	{14, 296}, 		// N 
	{12, 324}, 		// O 
	{9, 348}, 		// P 
	{12, 366}, 		// Q 
	{10, 390}, 		// R 
	{13, 410}, 		// S 
	{14, 436}, 		// T 
	{12, 464}, 		// U 
	{10, 488}, 		// V 
	{13, 508}, 		// W 
	{9, 534}, 		// X 
	{12, 552}, 		// Y 
	{11, 576}, 		// Z 
};

const uint8_t* getGlypth_aurekBesh(int charID, int* advance, int* w, int* rows)
{
	if (charID >= ',' && charID <= 'Z') {
		int index = charID - ',';
		int width = aurekBesh_7ptDescriptors[index].width;
		int offset = aurekBesh_7ptDescriptors[index].offset;
		*advance = width + 2;
		*w = width;
		*rows = 2;
		return aurekBesh_7ptBitmaps + offset;
	}
	*advance = 4;
	*w = 0;
	*rows = 0;
	return 0;
}


const uint8_t dial0Bitmaps[] =
{
	0x00, 0xF8, 0x1F, 0x00, //            ##########           
	0x00, 0x06, 0x61, 0x00, //          ##     #    ##         
	0x80, 0x01, 0x81, 0x01, //        ##       #      ##       
	0x40, 0x00, 0x01, 0x02, //       #         #        #      
	0x20, 0x00, 0x01, 0x04, //      #          #         #     
	0x10, 0x00, 0x01, 0x08, //     #           #          #    
	0x08, 0x00, 0x01, 0x10, //    #            #           #   
	0x04, 0x00, 0x01, 0x20, //   #             #            #  
	0x04, 0xE0, 0x07, 0x20, //   #          ######          #  
	0x02, 0x18, 0x18, 0x40, //  #         ##      ##         # 
	0x02, 0x04, 0x20, 0x40, //  #        #          #        # 
	0x1D, 0x02, 0x40, 0xB8, // # ###    #            #    ### #
	0x61, 0x02, 0x40, 0x86, // #    ##  #            #  ##    #
	0x81, 0x01, 0x80, 0x81, // #      ##              ##      #
	0x01, 0x01, 0x80, 0x80, // #       #              #       #
	0x01, 0x01, 0x80, 0x80, // #       #              #       #
	0x01, 0x01, 0x80, 0x80, // #       #              #       #
	0x01, 0x01, 0x80, 0x80, // #       #              #       #
	0x01, 0x01, 0x80, 0x80, // #       #              #       #
	0x01, 0x02, 0x40, 0x80, // #        #            #        #
	0x01, 0x02, 0x40, 0x80, // #        #            #        #
	0x02, 0x04, 0x20, 0x40, //  #        #          #        # 
	0x02, 0x02, 0x40, 0x40, //  #       #            #       # 
	0x04, 0x01, 0x80, 0x20, //   #     #              #     #  
	0x84, 0x00, 0x00, 0x21, //   #    #                #    #  
	0x48, 0x00, 0x00, 0x12, //    #  #                  #  #   
	0x30, 0x00, 0x00, 0x0C, //     ##                    ##    
	0x00, 0x00, 0x00, 0x00, //                                 
};


const uint8_t dial1Bitmaps[] =
{
	0x00, 0xF8, 0x1F, 0x00, //            ##########           
	0x00, 0x06, 0x61, 0x00, //          ##     #    ##         
	0x80, 0x01, 0x81, 0x01, //        ##       #      ##       
	0x40, 0x00, 0x01, 0x02, //       #         #        #      
	0x20, 0x00, 0x01, 0x04, //      #          #         #     
	0x10, 0x00, 0x01, 0x08, //     #           #          #    
	0x08, 0x00, 0x01, 0x10, //    #            #           #   
	0x04, 0x00, 0x01, 0x20, //   #             #            #  
	0x04, 0xE0, 0x07, 0x20, //   #          ######          #  
	0x02, 0x18, 0x18, 0x40, //  #         ##      ##         # 
	0x02, 0x04, 0x20, 0x40, //  #        #          #        # 
	0x1D, 0x02, 0x40, 0xF8, // # ###    #            #    #####
	0x61, 0x02, 0x40, 0xFE, // #    ##  #            #  #######
	0x81, 0x01, 0x80, 0xFF, // #      ##              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x02, 0xC0, 0xFF, // #        #            ##########
	0x01, 0x02, 0xC0, 0xFF, // #        #            ##########
	0x02, 0x04, 0xE0, 0x7F, //  #        #          ########## 
	0x02, 0x02, 0xC0, 0x7F, //  #       #            ######### 
	0x04, 0x01, 0x80, 0x3F, //   #     #              #######  
	0x84, 0x00, 0x00, 0x3F, //   #    #                ######  
	0x48, 0x00, 0x00, 0x1E, //    #  #                  ####   
	0x30, 0x00, 0x00, 0x0C, //     ##                    ##    
	0x00, 0x00, 0x00, 0x00, //                                 
};

// 
//  Image data for dial2
// 

const uint8_t dial2Bitmaps[] =
{
	0x00, 0xF8, 0x1F, 0x00, //            ##########           
	0x00, 0x06, 0x7F, 0x00, //          ##     #######         
	0x80, 0x01, 0xFF, 0x01, //        ##       #########       
	0x40, 0x00, 0xFF, 0x03, //       #         ##########      
	0x20, 0x00, 0xFF, 0x07, //      #          ###########     
	0x10, 0x00, 0xFF, 0x0F, //     #           ############    
	0x08, 0x00, 0xFF, 0x1F, //    #            #############   
	0x04, 0x00, 0xFF, 0x3F, //   #             ##############  
	0x04, 0xE0, 0xFF, 0x3F, //   #          #################  
	0x02, 0x18, 0xF8, 0x7F, //  #         ##      ############ 
	0x02, 0x04, 0xE0, 0x7F, //  #        #          ########## 
	0x1D, 0x02, 0xC0, 0xFF, // # ###    #            ##########
	0x61, 0x02, 0xC0, 0xFF, // #    ##  #            ##########
	0x81, 0x01, 0x80, 0xFF, // #      ##              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x02, 0xC0, 0xFF, // #        #            ##########
	0x01, 0x02, 0xC0, 0xFF, // #        #            ##########
	0x02, 0x04, 0xE0, 0x7F, //  #        #          ########## 
	0x02, 0x02, 0xC0, 0x7F, //  #       #            ######### 
	0x04, 0x01, 0x80, 0x3F, //   #     #              #######  
	0x84, 0x00, 0x00, 0x3F, //   #    #                ######  
	0x48, 0x00, 0x00, 0x1E, //    #  #                  ####   
	0x30, 0x00, 0x00, 0x0C, //     ##                    ##    
	0x00, 0x00, 0x00, 0x00, //                                 
};

// 
//  Image data for dial3
// 

const uint8_t dial3Bitmaps[] =
{
	0x00, 0xF8, 0x1F, 0x00, //            ##########           
	0x00, 0xFE, 0x7F, 0x00, //          ##############         
	0x80, 0xFF, 0xFF, 0x01, //        ##################       
	0xC0, 0xFF, 0xFF, 0x03, //       ####################      
	0xE0, 0xFF, 0xFF, 0x07, //      ######################     
	0xF0, 0xFF, 0xFF, 0x0F, //     ########################    
	0xF8, 0xFF, 0xFF, 0x1F, //    ##########################   
	0xFC, 0xFF, 0xFF, 0x3F, //   ############################  
	0xFC, 0xFF, 0xFF, 0x3F, //   ############################  
	0xFE, 0x1F, 0xF8, 0x7F, //  ############      ############ 
	0xFE, 0x07, 0xE0, 0x7F, //  ##########          ########## 
	0xFD, 0x03, 0xC0, 0xFF, // # ########            ##########
	0xE1, 0x03, 0xC0, 0xFF, // #    #####            ##########
	0x81, 0x01, 0x80, 0xFF, // #      ##              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x01, 0x80, 0xFF, // #       #              #########
	0x01, 0x02, 0xC0, 0xFF, // #        #            ##########
	0x01, 0x02, 0xC0, 0xFF, // #        #            ##########
	0x02, 0x04, 0xE0, 0x7F, //  #        #          ########## 
	0x02, 0x02, 0xC0, 0x7F, //  #       #            ######### 
	0x04, 0x01, 0x80, 0x3F, //   #     #              #######  
	0x84, 0x00, 0x00, 0x3F, //   #    #                ######  
	0x48, 0x00, 0x00, 0x1E, //    #  #                  ####   
	0x30, 0x00, 0x00, 0x0C, //     ##                    ##    
	0x00, 0x00, 0x00, 0x00, //                                 
};

// 
//  Image data for dial3
// 

const uint8_t dial4Bitmaps[] =
{
	0x00, 0xF8, 0x1F, 0x00, //            ##########           
	0x00, 0xFE, 0x7F, 0x00, //          ##############         
	0x80, 0xFF, 0xFF, 0x01, //        ##################       
	0xC0, 0xFF, 0xFF, 0x03, //       ####################      
	0xE0, 0xFF, 0xFF, 0x07, //      ######################     
	0xF0, 0xFF, 0xFF, 0x0F, //     ########################    
	0xF8, 0xFF, 0xFF, 0x1F, //    ##########################   
	0xFC, 0xFF, 0xFF, 0x3F, //   ############################  
	0xFC, 0xFF, 0xFF, 0x3F, //   ############################  
	0xFE, 0x1F, 0xF8, 0x7F, //  ############      ############ 
	0xFE, 0x07, 0xE0, 0x7F, //  ##########          ########## 
	0xFF, 0x03, 0xC0, 0xFF, // ##########            ##########
	0xFF, 0x03, 0xC0, 0xFF, // ##########            ##########
	0xFF, 0x01, 0x80, 0xFF, // #########              #########
	0xFF, 0x01, 0x80, 0xFF, // #########              #########
	0xFF, 0x01, 0x80, 0xFF, // #########              #########
	0xFF, 0x01, 0x80, 0xFF, // #########              #########
	0xFF, 0x01, 0x80, 0xFF, // #########              #########
	0xFF, 0x01, 0x80, 0xFF, // #########              #########
	0xFF, 0x03, 0xC0, 0xFF, // ##########            ##########
	0xFF, 0x03, 0xC0, 0xFF, // ##########            ##########
	0xFE, 0x07, 0xE0, 0x7F, //  ##########          ########## 
	0xFE, 0x03, 0xC0, 0x7F, //  #########            ######### 
	0xFC, 0x01, 0x80, 0x3F, //   #######              #######  
	0xFC, 0x00, 0x00, 0x3F, //   ######                ######  
	0x78, 0x00, 0x00, 0x1E, //    ####                  ####   
	0x30, 0x00, 0x00, 0x0C, //     ##                    ##    
	0x00, 0x00, 0x00, 0x00, //                                 
};

const uint8_t* get_dial0(int* width, int* height)
{
	if (width) *width = 28;
	if (height) *height = 32;
	return dial0Bitmaps;
}

const uint8_t* get_dial1(int* width, int* height)
{
	if (width) *width = 28;
	if (height) *height = 32;
	return dial1Bitmaps;
}

const uint8_t* get_dial2(int* width, int* height)
{
	if (width) *width = 28;
	if (height) *height = 32;
	return dial2Bitmaps;
}

const uint8_t* get_dial3(int* width, int* height)
{
	if (width) *width = 28;
	if (height) *height = 32;
	return dial3Bitmaps;
}

const uint8_t* get_dial4(int* width, int* height)
{
	if (width) *width = 28;
	if (height) *height = 32;
	return dial4Bitmaps;
}
// 
//  Font data for Aurek-Besh 6pt
// 

// Character bitmaps for Aurek-Besh 6pt
const uint8_t aurekBesh_6ptBitmaps[] = 
{
	// @0 ',' (1 pixels wide)
	0xF0, //     ####

	// @1 '.' (4 pixels wide)
	0xF0, //     ####
	0x00, //         
	0xF0, //     ####
	0xF0, //     ####

	// @5 'A' (13 pixels wide)
	0xEF, // #### ###
	0xEF, // #### ###
	0x2C, //   ## #  
	0x2C, //   ## #  
	0x2C, //   ## #  
	0x2C, //   ## #  
	0x2C, //   ## #  
	0x66, //  ##  ## 
	0x66, //  ##  ## 
	0xC3, // ##    ##
	0xC3, // ##    ##
	0x81, // #      #
	0x01, // #       

	// @18 'B' (12 pixels wide)
	0x24, //   #  #  
	0x66, //  ##  ## 
	0xC7, // ###   ##
	0xC3, // ##    ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xC3, // ##    ##
	0xE6, //  ##  ###
	0x24, //   #  #  

	// @30 'C' (7 pixels wide)
	0x3F, // ######  
	0x3F, // ######  
	0x00, //         
	0x38, //    ###  
	0x00, //         
	0xF8, //    #####
	0xF8, //    #####

	// @37 'D' (9 pixels wide)
	0x93, // ##  #  #
	0xDB, // ## ## ##
	0xFB, // ## #####
	0x3B, // ## ###  
	0x1B, // ## ##   
	0x0F, // ####    
	0x07, // ###     
	0x03, // ##      
	0x01, // #       

	// @46 'E' (12 pixels wide)
	0x01, // #       
	0x07, // ###     
	0x1E, //  ####   
	0x78, //    #### 
	0xE0, //      ###
	0xE0, //      ###
	0x78, //    #### 
	0x1E, //  ####   
	0x07, // ###     
	0xFF, // ########
	0xFF, // ########
	0x03, // ##      

	// @58 'F' (12 pixels wide)
	0xF8, //    #####
	0xF8, //    #####
	0xC8, //    #  ##
	0xC8, //    #  ##
	0xCC, //   ##  ##
	0xFF, // ########
	0xFF, // ########
	0xCC, //   ##  ##
	0xC4, //   #   ##
	0xC6, //  ##   ##
	0xC6, //  ##   ##
	0xC3, // ##    ##

	// @70 'G' (10 pixels wide)
	0xFF, // ########
	0xC0, //       ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xF3, // ##  ####
	0x3F, // ######  
	0x0F, // ####    
	0x03, // ##      

	// @80 'H' (12 pixels wide)
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xDB, // ## ## ##
	0xC3, // ##    ##
	0xC3, // ##    ##

	// @92 'I' (5 pixels wide)
	0x04, //   #     
	0x0E, //  ###    
	0x07, // ###     
	0xFF, // ########
	0xFF, // ########

	// @97 'J' (11 pixels wide)
	0xD8, //    ## ##
	0xD8, //    ## ##
	0xD8, //    ## ##
	0xD8, //    ## ##
	0xD8, //    ## ##
	0xD8, //    ## ##
	0xCC, //   ##  ##
	0xFC, //   ######
	0x3E, //  #####  
	0x0F, // ####    
	0x03, // ##      

	// @108 'K' (12 pixels wide)
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xFF, // ########
	0xFF, // ########

	// @120 'L' (7 pixels wide)
	0x18, //    ##   
	0x30, //     ##  
	0x60, //      ## 
	0x60, //      ## 
	0xC0, //       ##
	0xFF, // ########
	0xFF, // ########

	// @127 'M' (7 pixels wide)
	0xC0, //       ##
	0xF0, //     ####
	0xFC, //   ######
	0xCF, // ####  ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0x40, //       # 

	// @134 'N' (12 pixels wide)
	0x1C, //   ###   
	0xFF, // ########
	0xC1, // #     ##
	0xE0, //      ###
	0x78, //    #### 
	0x1E, //  ####   
	0x07, // ###     
	0x07, // ###     
	0x0E, //  ###    
	0x38, //    ###  
	0xE0, //      ###
	0xC0, //       ##

	// @146 'O' (11 pixels wide)
	0x40, //       # 
	0xF8, //    #####
	0xDE, //  #### ##
	0xC7, // ###   ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC7, // ###   ##
	0xDE, //  #### ##
	0xF8, //    #####
	0x60, //      ## 

	// @157 'P' (8 pixels wide)
	0x38, //    ###  
	0xFE, //  #######
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC0, //       ##
	0xFF, // ########
	0xFF, // ########

	// @165 'Q' (10 pixels wide)
	0xFF, // ########
	0xFF, // ########
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0x43, // ##    # 
	0x03, // ##      
	0x03, // ##      
	0x07, // ###     

	// @175 'R' (9 pixels wide)
	0x02, //  #      
	0x83, // ##     #
	0xE3, // ##   ###
	0x73, // ##  ### 
	0x3B, // ## ###  
	0x1F, // #####   
	0x07, // ###     
	0x03, // ##      
	0x01, // #       

	// @184 'S' (11 pixels wide)
	0x20, //      #  
	0x20, //      #  
	0x61, // #    ## 
	0x63, // ##   ## 
	0x46, //  ##   # 
	0xCC, //   ##  ##
	0x58, //    ## # 
	0x30, //     ##  
	0x60, //      ## 
	0xC0, //       ##
	0xFF, // ########

	// @195 'T' (11 pixels wide)
	0x10, //     #   
	0x30, //     ##  
	0x60, //      ## 
	0xC0, //       ##
	0xC0, //       ##
	0xFF, // ########
	0x80, //        #
	0xC0, //       ##
	0x60, //      ## 
	0x30, //     ##  
	0x10, //     #   

	// @206 'U' (11 pixels wide)
	0xFF, // ########
	0xFF, // ########
	0xC0, //       ##
	0xC0, //       ##
	0xCC, //   ##  ##
	0xCE, //  ###  ##
	0xC7, // ###   ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xFF, // ########
	0xFF, // ########

	// @217 'V' (9 pixels wide)
	0x01, // #       
	0x03, // ##      
	0x06, //  ##     
	0xFC, //   ######
	0xFC, //   ######
	0x0E, //  ###    
	0x07, // ###     
	0x03, // ##      
	0x01, // #       

	// @226 'W' (12 pixels wide)
	0xFF, // ########
	0xFF, // ########
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xC3, // ##    ##
	0xFF, // ########
	0xFE, //  #######

	// @238 'X' (8 pixels wide)
	0xE0, //      ###
	0xF8, //    #####
	0xDE, //  #### ##
	0xC7, // ###   ##
	0xC7, // ###   ##
	0xDC, //   ### ##
	0xF0, //     ####
	0xE0, //      ###

	// @246 'Y' (11 pixels wide)
	0x01, // #       
	0x07, // ###     
	0x1D, // # ###   
	0x7B, // ## #### 
	0xE6, //  ##  ###
	0x84, //   #    #
	0xE0, //      ###
	0x70, //     ### 
	0x1C, //   ###   
	0x07, // ###     
	0x01, // #       

	// @257 'Z' (10 pixels wide)
	0xE0, //      ###
	0xF0, //     ####
	0xD8, //    ## ##
	0xDC, //   ### ##
	0xCC, //   ##  ##
	0xCC, //   ##  ##
	0xCC, //   ##  ##
	0xCC, //   ##  ##
	0xFF, // ########
	0xFF, // ########
};

// Character descriptors for Aurek-Besh 6pt
// { [Char width in bits], [Offset into aurekBesh_6ptCharBitmaps in bytes] }
const GlypthInfo aurekBesh_6ptDescriptors[] = 
{
	{1, 0}, 		// , 
	{0, 0}, 		// - 
	{4, 1}, 		// . 
	{0, 0}, 		// / 
	{0, 0}, 		// 0 
	{0, 0}, 		// 1 
	{0, 0}, 		// 2 
	{0, 0}, 		// 3 
	{0, 0}, 		// 4 
	{0, 0}, 		// 5 
	{0, 0}, 		// 6 
	{0, 0}, 		// 7 
	{0, 0}, 		// 8 
	{0, 0}, 		// 9 
	{0, 0}, 		// : 
	{0, 0}, 		// ; 
	{0, 0}, 		// < 
	{0, 0}, 		// = 
	{0, 0}, 		// > 
	{0, 0}, 		// ? 
	{0, 0}, 		// @ 
	{13, 5}, 		// A 
	{12, 18}, 		// B 
	{7, 30}, 		// C 
	{9, 37}, 		// D 
	{12, 46}, 		// E 
	{12, 58}, 		// F 
	{10, 70}, 		// G 
	{12, 80}, 		// H 
	{5, 92}, 		// I 
	{11, 97}, 		// J 
	{12, 108}, 		// K 
	{7, 120}, 		// L 
	{7, 127}, 		// M 
	{12, 134}, 		// N 
	{11, 146}, 		// O 
	{8, 157}, 		// P 
	{10, 165}, 		// Q 
	{9, 175}, 		// R 
	{11, 184}, 		// S 
	{11, 195}, 		// T 
	{11, 206}, 		// U 
	{9, 217}, 		// V 
	{12, 226}, 		// W 
	{8, 238}, 		// X 
	{11, 246}, 		// Y 
	{10, 257}, 		// Z 
};

const uint8_t* getGlypth_aurekBesh6(int charID, int* advance, int* w, int* rows)
{
	if (charID >= ',' && charID <= 'Z') {
		int index = charID - ',';
		int width = aurekBesh_6ptDescriptors[index].width;
		int offset = aurekBesh_6ptDescriptors[index].offset;
		*advance = width + 2;
		*w = width;
		*rows = 1;
		return aurekBesh_6ptBitmaps + offset;
	}
	*advance = 4;
	*w = 0;
	*rows = 0;
	return 0;
}
